#!/bin/bash
set -e

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1738197 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Wayland socket management
wdisplay="wayland-0"
if [ -n "$WAYLAND_DISPLAY" ]; then
  wdisplay="$WAYLAND_DISPLAY"
fi
wayland_sockpath="$XDG_RUNTIME_DIR/../$wdisplay"
wayland_snappath="$XDG_RUNTIME_DIR/$wdisplay"

# Detect old interface usage
if [ -n "${WAYLAND_SOCKET_DIR-}" ]; then
  echo "#################################################################################"
  echo "NOTICE: the 'wayland-socket-dir' interface has been removed!"
  echo "Remove reference to it and WAYLAND_SOCKET_DIR from your snapcraft.yaml."
  echo ""
  echo "Consult the instructions in"
  echo "https://github.com/gerboland/xwayland-kiosk-helper/blob/master/snapcraft.yaml"
  echo "#################################################################################"
  exit 5
fi

# If running on Classic, a Wayland socket may be in the usual XDG_RUNTIME_DIR
if [ ! -S "$wayland_snappath" ]; then
  # Either running on Core, or no Wayland socket to be found
  if [ ! -S "$wayland_sockpath" ]; then
    echo "Error: Unable to find a valid Wayland socket in $(dirname $XDG_RUNTIME_DIR)"
    echo "Is a Wayland server running?"

    # On Core, Xwayland needs to run as root (bug lp:1767372), so everything has to
    if [ "$EUID" -ne 0 ]; then
      echo "You could try running as root"
    fi
    exit 1
  fi

  # If on Core, existance of the socket does not imply ability to open it (AppArmor can deny that)
  # - opening it is only way to be sure it can be used
  attempted_open=$(cat "$wayland_sockpath" 2>&1) || true;

  if [[ $attempted_open = *"Permission denied"* ]]; then
    echo "##################################################################################"
    echo "You may need to connect this snap to one which implements the 'wayland' plug."
    echo ""
    echo "You can do this with these commands:"
    echo "  snap install mir-kiosk"
    echo "  snap connect $SNAP_NAME:wayland mir-kiosk:wayland"
    echo "##################################################################################"
    exit 2
  fi

  # if running under wayland, use it
  #export WAYLAND_DEBUG=1
  # create the compat symlink for now
  if [ ! -e "$wayland_snappath" ]; then
    ln -s "$wayland_sockpath" "$wayland_snappath"
  fi
fi

# This snap provides both an X11 server and an X11 client which needs to connect to it. To allow
# this to work correctly, need to be both an X11 slot and X11 plug, and have them connected.
# Detect the X11 plug/slot connected by verifying access to fontconfig directory.
attempted_open=$(ls "/var/cache/fontconfig/" 2>&1) || true;

if [[ $attempted_open = *"Permission denied"* ]]; then
  echo "##################################################################################"
  echo "If you are experiencing problems with your GUI app (e.g. bad fonts), please run:"
  echo "  snap connect $SNAP_NAME:x11-plug $SNAP_NAME:x11"
  echo "##################################################################################"
fi

# If necessary, set up minimal environment for Xwayland to function
if [ -z ${LIBGL_DRIVERS_PATH+x} ]; then
  if [ "$SNAP_ARCH" == "amd64" ]; then
    ARCH="x86_64-linux-gnu"
  elif [ "$SNAP_ARCH" == "armhf" ]; then
    ARCH="arm-linux-gnueabihf"
  elif [ "$SNAP_ARCH" == "arm64" ]; then
    ARCH="aarch64-linux-gnu"
  else
    ARCH="$SNAP_ARCH-linux-gnu"
  fi

  export LIBGL_DRIVERS_PATH=$SNAP/usr/lib/$ARCH/dri
fi

# Xwayland: Use new port number in case old server clean up wasn't successful
port=0
while [ "$(DISPLAY=:$port xdpyinfo &>/dev/null; echo $?)" -eq 0 ]; do
  let port+=1;
done

# We need a simple window manager to make the client application fullscreen.
# i3 is a lightweight and flexible choice. It requires a configuration file to
# behave correctly. Provide 2 options to snaps:
#  1. Set an "XWAYLAND_I3_CONFIG_FILE" variable with path to such a file
#  2. Set an "XWAYLAND_FULLSCREEN_WINDOW_HINT" variable with the X11 window name
#     that should be fullscreened. A suitable i3 config file will be auto-generated.
if [ -n "${XWAYLAND_I3_CONFIG_FILE-}" ]; then
  # Check it exists
  if [ ! -f "${XWAYLAND_I3_CONFIG_FILE}" ]; then
    echo "ERROR: specified i3 config file '${XWAYLAND_I3_CONFIG_FILE}' does not exist"
    exit 1
  fi
  I3_CONFIG="${XWAYLAND_I3_CONFIG_FILE}"
elif [ -n "${XWAYLAND_FULLSCREEN_WINDOW_HINT-}" ]; then
  # Am using i3 here, so generate a simple config file for it.
  I3_CONFIG=$SNAP_DATA/i3.config

  cat <<EOF > "$I3_CONFIG"
# i3 config file (v4)
font pango:monospace 8
# set window for fullscreen
for_window [${XWAYLAND_FULLSCREEN_WINDOW_HINT}] fullscreen
EOF

else
  echo "#################################################################################"
  echo "ERROR: The internal i3 window manager has not been configured."
  echo ""
  echo "To rectify, consult the instructions in"
  echo "https://github.com/gerboland/xwayland-kiosk-helper/blob/master/snapcraft.yaml"
  echo "#################################################################################"
  exit 1
fi

# Launch Xwayland.
SNAPPY_PRELOAD=$SNAP \
LD_PRELOAD=$SNAP/lib/libxwayland-preload.so \
  $SNAP/usr/bin/Xwayland -terminate :${port} &

trap "trap - SIGTERM EXIT && kill -- -$$" SIGINT SIGTERM SIGQUIT EXIT # kill on signal or quit
sleep 1 # FIXME - Xwayland does emit SIGUSR1 when ready for client connections

# Set the X environment
export DISPLAY=":${port}"
export GDK_BACKEND="x11"
export CLUTTER_BACKEND="x11"
export QT_QPA_PLATFORM="xcb"

$SNAP/usr/bin/i3 -c "$I3_CONFIG" &

# Launch the X11 process passed in
"$@"

